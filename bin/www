#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');

const {
  socketio, websocket, grpc
} = require('../other');

const debug = require('debug')('temp-server:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const HTTP_PORT = normalizePort(process.env.PORT || '3000');
const SOCKET_IO_PORT = normalizePort(process.env.SOCKET_IO_PORT || '4000');
const GRPC_PORT = normalizePort(process.env.GRPC_PORT || '50051');

app.set('port', HTTP_PORT);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const serverForSocketio = http.createServer();

serverForSocketio.listen(SOCKET_IO_PORT)

socketio(serverForSocketio);
websocket(server);
grpc();

console.log(`\u001b[1;32mðŸ“—: HTTP      server port on : ${HTTP_PORT}`)
console.log(`\u001b[1;32mðŸ“—: WebSocket server port on : ${HTTP_PORT}`)
console.log(`\u001b[1;32mðŸ“—: socket.io server port on : ${SOCKET_IO_PORT}`)
console.log(`\u001b[1;32mðŸ“—: gRPC      server port on : ${GRPC_PORT}`)
console.log('\u001b[0m');

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(HTTP_PORT);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
